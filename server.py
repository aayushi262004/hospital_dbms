from flask import Flask, render_template, request, redirect, url_for
import oracledb

app = Flask(__name__)

def get_connection():
    return oracledb.connect(
        user="system",  # Use SYSTEM user
        password="noni123",
        dsn="localhost/XE"
    )

def init_database():
    """Create 5 separate tables for patient management system"""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # Define the 5 tables with ONLY your existing columns
        tables_schema = {
            'patients_basic': {
                'columns': {
                    'id': 'NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY',
                    'name': 'VARCHAR2(100) NOT NULL',
                    'age': 'NUMBER NOT NULL'
                },
                'description': 'Basic patient information'
            },
            'patients_personal': {
                'columns': {
                    'patient_id': 'NUMBER PRIMARY KEY',
                    'gender': 'VARCHAR2(10)',
                    'blood_group': 'VARCHAR2(5)'
                },
                'description': 'Patient personal details'
            },
            'patients_contact': {
                'columns': {
                    'patient_id': 'NUMBER PRIMARY KEY',
                    'phone': 'VARCHAR2(20)',
                    'email': 'VARCHAR2(100)',
                    'address': 'VARCHAR2(500)',
                    'emergency_contact': 'VARCHAR2(200)'
                },
                'description': 'Patient contact information'
            },
            'patients_medical': {
                'columns': {
                    'patient_id': 'NUMBER PRIMARY KEY',
                    'ailment': 'VARCHAR2(200) NOT NULL',
                    'doctor': 'VARCHAR2(100)',
                    'admission_date': 'DATE',
                    'notes': 'VARCHAR2(1000)'
                },
                'description': 'Patient medical information'
            },
            'patients_temp': {
                'columns': {
                    'patient_id': 'NUMBER PRIMARY KEY',
                    'temp_field1': 'VARCHAR2(100)',
                    'temp_field2': 'VARCHAR2(100)'
                },
                'description': 'Additional patient data (for future use)'
            }
        }
        
        # Create each table
        for table_name, table_info in tables_schema.items():
            # Check if table exists
            cursor.execute("""
                SELECT COUNT(*) 
                FROM all_tables 
                WHERE table_name = UPPER(:1) AND owner = 'SYSTEM'
            """, (table_name,))
            
            table_exists = cursor.fetchone()[0]
            
            if not table_exists:
                # Build CREATE TABLE statement
                columns_def = []
                for col_name, col_type in table_info['columns'].items():
                    columns_def.append(f"{col_name} {col_type}")
                
                create_sql = f"""
                    CREATE TABLE {table_name} (
                        {', '.join(columns_def)}
                    )
                """
                
                cursor.execute(create_sql)
                print(f"✅ Created table: {table_name} - {table_info['description']}")
                
                # Add foreign key constraints for related tables
                if table_name != 'patients_basic':
                    try:
                        fk_sql = f"""
                            ALTER TABLE {table_name} 
                            ADD CONSTRAINT fk_{table_name}_patient_id 
                            FOREIGN KEY (patient_id) REFERENCES patients_basic(id) ON DELETE CASCADE
                        """
                        cursor.execute(fk_sql)
                        print(f"✅ Added foreign key constraint for {table_name}")
                    except Exception as e:
                        print(f"⚠️  Could not add foreign key for {table_name}: {e}")
            else:
                print(f"✅ Table {table_name} already exists")
        
        conn.commit()
        
        # Count patients in basic table
        cursor.execute("SELECT COUNT(*) FROM patients_basic")
        count = cursor.fetchone()[0]
        print(f"✅ Number of patients in database: {count}")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"Database initialization error: {e}")

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/patients')
def patients():
    conn = None
    cursor = None
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # Join all tables to get complete patient information
        cursor.execute("""
            SELECT 
                pb.id, pb.name, pb.age, pm.ailment, pp.gender, pp.blood_group, 
                pc.phone, pc.email, pm.admission_date, pm.doctor, pc.address, 
                pc.emergency_contact, pm.notes
            FROM patients_basic pb
            LEFT JOIN patients_personal pp ON pb.id = pp.patient_id
            LEFT JOIN patients_contact pc ON pb.id = pc.patient_id
            LEFT JOIN patients_medical pm ON pb.id = pm.patient_id
            ORDER BY pb.id
        """)
        
        patients_data = cursor.fetchall()
        print("Fetched patients:", len(patients_data), "records")
        return render_template('patients.html', patients=patients_data)
    except Exception as e:
        print("ERROR:", e)
        return f"<h1>Error: {e}</h1>", 500
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

@app.route('/add_patient', methods=['POST'])
def add_patient():
    conn = None
    cursor = None
    try:
        # Get form data
        name = request.form['name']
        age = int(request.form['age'])
        condition = request.form['condition']
        
        # Get optional fields
        gender = request.form.get('gender', '')
        blood_group = request.form.get('blood_group', '')
        phone = request.form.get('phone', '')
        email = request.form.get('email', '')
        admission_date = request.form.get('admission_date', '')
        doctor = request.form.get('doctor', '')
        address = request.form.get('address', '')
        emergency_contact = request.form.get('emergency_contact', '')
        notes = request.form.get('notes', '')
        
        # Convert admission_date to DATE or None
        from datetime import datetime
        admission_date_sql = None
        if admission_date.strip():
            try:
                admission_date_sql = datetime.strptime(admission_date.strip(), '%Y-%m-%d')
            except ValueError:
                admission_date_sql = None
        
        conn = get_connection()
        cursor = conn.cursor()
        
        # Insert into patients_basic table first and get the ID
        cursor.execute("""
            INSERT INTO patients_basic (name, age) 
            VALUES (:1, :2)
        """, (name, age))
        
        # Get the generated patient ID
        cursor.execute("""
            SELECT id FROM patients_basic 
            WHERE ROWID = (SELECT MAX(ROWID) FROM patients_basic)
        """)
        patient_id = cursor.fetchone()[0]
        
        # Insert into patients_personal table
        if gender or blood_group:
            cursor.execute("""
                INSERT INTO patients_personal (patient_id, gender, blood_group) 
                VALUES (:1, :2, :3)
            """, (patient_id, gender if gender else None, blood_group if blood_group else None))
        
        # Insert into patients_contact table
        if phone or email or address or emergency_contact:
            cursor.execute("""
                INSERT INTO patients_contact (patient_id, phone, email, address, emergency_contact) 
                VALUES (:1, :2, :3, :4, :5)
            """, (patient_id, phone if phone else None, email if email else None, 
                  address if address else None, emergency_contact if emergency_contact else None))
        
        # Insert into patients_medical table
        cursor.execute("""
            INSERT INTO patients_medical (patient_id, ailment, doctor, admission_date, notes) 
            VALUES (:1, :2, :3, :4, :5)
        """, (patient_id, condition, doctor if doctor else None, admission_date_sql, notes if notes else None))
        
        conn.commit()
        return redirect(url_for('patients'))
    except Exception as e:
        print(f"Error adding patient: {e}")
        return f"<h1>Error adding patient: {e}</h1>", 500
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

@app.route('/delete_patient/<int:patient_id>', methods=['POST'])
def delete_patient(patient_id):
    conn = None
    cursor = None
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # Delete from patients_basic (CASCADE will handle related tables)
        cursor.execute("DELETE FROM patients_basic WHERE id = :1", (patient_id,))
        
        conn.commit()
        return redirect(url_for('patients'))
    except Exception as e:
        print(f"Error deleting patient: {e}")
        return f"<h1>Error deleting patient: {e}</h1>", 500
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

@app.route('/update_patient/<int:patient_id>', methods=['GET', 'POST'])
def update_patient(patient_id):
    conn = None
    cursor = None
    try:
        conn = get_connection()
        cursor = conn.cursor()

        if request.method == 'POST':
            # Get form data
            name = request.form['name']
            age = int(request.form['age'])
            condition = request.form['condition']
            
            # Get optional fields
            gender = request.form.get('gender', '')
            blood_group = request.form.get('blood_group', '')
            phone = request.form.get('phone', '')
            email = request.form.get('email', '')
            admission_date = request.form.get('admission_date', '')
            doctor = request.form.get('doctor', '')
            address = request.form.get('address', '')
            emergency_contact = request.form.get('emergency_contact', '')
            notes = request.form.get('notes', '')
            
            # Update patients_basic table
            cursor.execute("""
                UPDATE patients_basic 
                SET name = :1, age = :2
                WHERE id = :3
            """, (name, age, patient_id))
            
            # Update or insert patients_personal table
            cursor.execute("SELECT COUNT(*) FROM patients_personal WHERE patient_id = :1", (patient_id,))
            personal_exists = cursor.fetchone()[0] > 0
            
            if personal_exists:
                cursor.execute("""
                    UPDATE patients_personal 
                    SET gender = :1, blood_group = :2
                    WHERE patient_id = :3
                """, (gender if gender else None, blood_group if blood_group else None, patient_id))
            else:
                if gender or blood_group:
                    cursor.execute("""
                        INSERT INTO patients_personal (patient_id, gender, blood_group) 
                        VALUES (:1, :2, :3)
                    """, (patient_id, gender if gender else None, blood_group if blood_group else None))
            
            # Update or insert patients_contact table
            cursor.execute("SELECT COUNT(*) FROM patients_contact WHERE patient_id = :1", (patient_id,))
            contact_exists = cursor.fetchone()[0] > 0
            
            if contact_exists:
                cursor.execute("""
                    UPDATE patients_contact 
                    SET phone = :1, email = :2, address = :3, emergency_contact = :4
                    WHERE patient_id = :5
                """, (phone if phone else None, email if email else None, 
                      address if address else None, emergency_contact if emergency_contact else None, patient_id))
            else:
                if phone or email or address or emergency_contact:
                    cursor.execute("""
                        INSERT INTO patients_contact (patient_id, phone, email, address, emergency_contact) 
                        VALUES (:1, :2, :3, :4, :5)
                    """, (patient_id, phone if phone else None, email if email else None, 
                          address if address else None, emergency_contact if emergency_contact else None))
            
            # Update patients_medical table
            cursor.execute("SELECT COUNT(*) FROM patients_medical WHERE patient_id = :1", (patient_id,))
            medical_exists = cursor.fetchone()[0] > 0
            
            if medical_exists:
                cursor.execute("""
                    UPDATE patients_medical 
                    SET ailment = :1, doctor = :2, 
                        admission_date = CASE WHEN :3 = '' THEN NULL ELSE TO_DATE(:4, 'YYYY-MM-DD') END,
                        notes = :5
                    WHERE patient_id = :6
                """, (condition, doctor if doctor else None, admission_date, admission_date, 
                      notes if notes else None, patient_id))
            else:
                from datetime import datetime
                admission_date_sql = None
                if admission_date.strip():
                    try:
                        admission_date_sql = datetime.strptime(admission_date.strip(), '%Y-%m-%d')
                    except ValueError:
                        admission_date_sql = None
                
                cursor.execute("""
                    INSERT INTO patients_medical (patient_id, ailment, doctor, admission_date, notes) 
                    VALUES (:1, :2, :3, :4, :5)
                """, (patient_id, condition, doctor if doctor else None, admission_date_sql, notes if notes else None))
            
            conn.commit()
            return redirect(url_for('patients'))

        else:
            # GET request - show update form
            cursor.execute("""
                SELECT 
                    pb.id, pb.name, pb.age, pm.ailment, pp.gender, pp.blood_group, 
                    pc.phone, pc.email, TO_CHAR(pm.admission_date, 'YYYY-MM-DD') as admission_date, 
                    pm.doctor, pc.address, pc.emergency_contact, pm.notes
                FROM patients_basic pb
                LEFT JOIN patients_personal pp ON pb.id = pp.patient_id
                LEFT JOIN patients_contact pc ON pb.id = pc.patient_id
                LEFT JOIN patients_medical pm ON pb.id = pm.patient_id
                WHERE pb.id = :1
            """, (patient_id,))
            
            patient = cursor.fetchone()
            if patient:
                return render_template('update_patient.html', patient=patient)
            else:
                return "<h1>Patient not found</h1>", 404

    except Exception as e:
        print(f"Error updating patient: {e}")
        return f"<h1>Error: {e}</h1>", 500
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

if __name__ == '__main__':
    # Initialize database on startup
    init_database()
    app.run(debug=True)