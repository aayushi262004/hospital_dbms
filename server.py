from flask import Flask, render_template, request, redirect, url_for
import oracledb

app = Flask(__name__)

def get_connection():
    return oracledb.connect(
        user="system",  # Use SYSTEM user
        password="noni123",
        dsn="localhost/XE"
    )

def init_database():
    """Check if the patients table exists and add new columns if needed"""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # Check if patients table exists in current schema
        cursor.execute("""
            SELECT COUNT(*) 
            FROM all_tables 
            WHERE table_name = 'PATIENTS' AND owner = 'SYSTEM'
        """)
        
        table_exists = cursor.fetchone()[0]
        
        if table_exists:
            print("✅ PATIENTS table found in SYSTEM schema")
            
            # Check existing columns
            cursor.execute("""
                SELECT column_name 
                FROM all_tab_columns 
                WHERE table_name = 'PATIENTS' AND owner = 'SYSTEM'
                ORDER BY column_id
            """)
            existing_columns = [row[0].lower() for row in cursor.fetchall()]
            print(f"✅ Existing columns: {existing_columns}")
            
            # Define new columns to add
            new_columns = {
                'gender': 'VARCHAR2(10)',
                'blood_group': 'VARCHAR2(5)',
                'phone': 'VARCHAR2(20)',
                'email': 'VARCHAR2(100)',
                'admission_date': 'DATE',
                'doctor': 'VARCHAR2(100)',
                'address': 'VARCHAR2(500)',
                'emergency_contact': 'VARCHAR2(200)',
                'notes': 'VARCHAR2(1000)'
            }
            
            # Add missing columns
            for col_name, col_type in new_columns.items():
                if col_name not in existing_columns:
                    try:
                        cursor.execute(f"ALTER TABLE patients ADD {col_name} {col_type}")
                        print(f"✅ Added column: {col_name}")
                    except Exception as e:
                        print(f"⚠️  Could not add column {col_name}: {e}")
            
            conn.commit()
            
            # Count patients
            cursor.execute("SELECT COUNT(*) FROM patients")
            count = cursor.fetchone()[0]
            print(f"✅ Number of patients in database: {count}")
        else:
            print("⚠️  PATIENTS table does not exist in SYSTEM schema")
            # Create table with all columns
            cursor.execute("""
                CREATE TABLE patients (
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    name VARCHAR2(100) NOT NULL,
                    age NUMBER NOT NULL,
                    ailment VARCHAR2(200) NOT NULL,
                    gender VARCHAR2(10),
                    blood_group VARCHAR2(5),
                    phone VARCHAR2(20),
                    email VARCHAR2(100),
                    admission_date DATE,
                    doctor VARCHAR2(100),
                    address VARCHAR2(500),
                    emergency_contact VARCHAR2(200),
                    notes VARCHAR2(1000)
                )
            """)
            conn.commit()
            print("✅ Created PATIENTS table with all columns")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"Database initialization error: {e}")

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/patients')
def patients():
    conn = None
    cursor = None
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # Get all columns that exist in the table
        cursor.execute("""
            SELECT column_name 
            FROM all_tab_columns 
            WHERE table_name = 'PATIENTS' AND owner = 'SYSTEM'
            ORDER BY column_id
        """)
        columns = [row[0].lower() for row in cursor.fetchall()]
        
        # Build dynamic query based on available columns
        if 'gender' in columns:
            # New enhanced query
            cursor.execute("""
                SELECT id, name, age, ailment, gender, blood_group, phone, email, 
                       admission_date, doctor, address, emergency_contact, notes
                FROM patients ORDER BY id
            """)
        else:
            # Fallback to original query
            cursor.execute("SELECT id, name, age, ailment FROM patients ORDER BY id")
        
        patients_data = cursor.fetchall()
        print("Fetched patients:", len(patients_data), "records")
        return render_template('patients.html', patients=patients_data)
    except Exception as e:
        print("ERROR:", e)
        return f"<h1>Error: {e}</h1>", 500
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

@app.route('/add_patient', methods=['POST'])
def add_patient():
    conn = None
    cursor = None
    try:
        # Get form data
        name = request.form['name']
        age = int(request.form['age'])
        condition = request.form['condition']
        
        # Get optional fields
        gender = request.form.get('gender', '')
        blood_group = request.form.get('blood_group', '')
        phone = request.form.get('phone', '')
        email = request.form.get('email', '')
        admission_date = request.form.get('admission_date', '')
        doctor = request.form.get('doctor', '')
        address = request.form.get('address', '')
        emergency_contact = request.form.get('emergency_contact', '')
        notes = request.form.get('notes', '')
        
        # Convert admission_date to DATE or None
        from datetime import datetime
        admission_date_sql = None
        if admission_date.strip():
            try:
                admission_date_sql = datetime.strptime(admission_date.strip(), '%Y-%m-%d')
            except ValueError:
                admission_date_sql = None  # Skip if format invalid
        
        conn = get_connection()
        cursor = conn.cursor()
        
        # Check if new columns exist
        cursor.execute("""
            SELECT column_name 
            FROM all_tab_columns 
            WHERE table_name = 'PATIENTS' AND owner = 'SYSTEM'
            ORDER BY column_id
        """)
        columns = [row[0].lower() for row in cursor.fetchall()]
        
        if 'gender' in columns:
            # Insert with all fields - FIXED: Removed extra empty string parameter
            sql = """
                INSERT INTO patients 
                (name, age, ailment, gender, blood_group, phone, email, admission_date, 
                 doctor, address, emergency_contact, notes) 
                VALUES (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12)
            """
            cursor.execute(sql, (name, age, condition, gender, blood_group, phone, 
                                 email, admission_date_sql, doctor, address, emergency_contact, notes))
        else:
            # Fallback to original insert
            sql = "INSERT INTO patients (name, age, ailment) VALUES (:1, :2, :3)"
            cursor.execute(sql, (name, age, condition))
        
        conn.commit()
        return redirect(url_for('patients'))
    except Exception as e:
        print(f"Error adding patient: {e}")
        return f"<h1>Error adding patient: {e}</h1>", 500
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()


@app.route('/delete_patient/<int:patient_id>', methods=['POST'])
def delete_patient(patient_id):
    conn = None
    cursor = None
    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM patients WHERE id = :1", (patient_id,))
        conn.commit()
        return redirect(url_for('patients'))
    except Exception as e:
        print(f"Error deleting patient: {e}")
        return f"<h1>Error deleting patient: {e}</h1>", 500
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

@app.route('/update_patient/<int:patient_id>', methods=['GET', 'POST'])
def update_patient(patient_id):
    conn = None
    cursor = None
    try:
        conn = get_connection()
        cursor = conn.cursor()

        if request.method == 'POST':
            # Get form data
            name = request.form['name']
            age = int(request.form['age'])
            condition = request.form['condition']
            
            # Get optional fields
            gender = request.form.get('gender', '')
            blood_group = request.form.get('blood_group', '')
            phone = request.form.get('phone', '')
            email = request.form.get('email', '')
            admission_date = request.form.get('admission_date', '')
            doctor = request.form.get('doctor', '')
            address = request.form.get('address', '')
            emergency_contact = request.form.get('emergency_contact', '')
            notes = request.form.get('notes', '')
            
            # Check if new columns exist
            cursor.execute("""
                SELECT column_name 
                FROM all_tab_columns 
                WHERE table_name = 'PATIENTS' AND owner = 'SYSTEM'
                ORDER BY column_id
            """)
            columns = [row[0].lower() for row in cursor.fetchall()]
            
            if 'gender' in columns:
                # Update with all fields - FIXED: Corrected parameter binding
                cursor.execute("""
                    UPDATE patients 
                    SET name = :1, age = :2, ailment = :3, gender = :4, blood_group = :5,
                        phone = :6, email = :7, 
                        admission_date = CASE WHEN :8 = '' THEN NULL ELSE TO_DATE(:9, 'YYYY-MM-DD') END,
                        doctor = :10, address = :11, emergency_contact = :12, notes = :13
                    WHERE id = :14
                """, (
                    name, age, condition, gender, blood_group,
                    phone, email, admission_date, admission_date,
                    doctor, address, emergency_contact, notes, patient_id
                ))
            else:
                # Fallback to original update
                cursor.execute("""
                    UPDATE patients 
                    SET name = :1, age = :2, ailment = :3 
                    WHERE id = :4
                """, (name, age, condition, patient_id))
            
            conn.commit()
            return redirect(url_for('patients'))

        else:
            # GET request - show update form
            cursor.execute("""
                SELECT column_name 
                FROM all_tab_columns 
                WHERE table_name = 'PATIENTS' AND owner = 'SYSTEM'
                ORDER BY column_id
            """)
            columns = [row[0].lower() for row in cursor.fetchall()]
            
            if 'gender' in columns:
                cursor.execute("""
                    SELECT id, name, age, ailment, gender, blood_group, phone, email, 
                           TO_CHAR(admission_date, 'YYYY-MM-DD') as admission_date, 
                           doctor, address, emergency_contact, notes
                    FROM patients WHERE id = :1
                """, (patient_id,))
            else:
                cursor.execute("SELECT id, name, age, ailment FROM patients WHERE id = :1", (patient_id,))
            
            patient = cursor.fetchone()
            if patient:
                return render_template('update_patient.html', patient=patient)
            else:
                return "<h1>Patient not found</h1>", 404

    except Exception as e:
        print(f"Error updating patient: {e}")
        return f"<h1>Error: {e}</h1>", 500
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

if __name__ == '__main__':
    # Initialize database on startup
    init_database()
    app.run(debug=True)